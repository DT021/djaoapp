openapi: 3.0.2
info:
  title: DjaoApp API
  version: ''
  description: API to deploy apps on the djaodjin platform
paths:
  /api/auth/tokens/realms/{organization}/:
    get:
      operationId: RetrieveCredentials
      description: '

        Gets temporary credentials to access S3 directly from the browser.

        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves temporary credentials
      tags: []
  /api/proxy/recent/:
    get:
      operationId: ListRecentActivitys
      description: '

        '
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves recently active users
      tags:
      - metrics
  /api/proxy/:
    get:
      operationId: RetrieveAppUpdate
      description: 'are forwarded to, and the format in which the session information

        is encoded.


        When running tests, you can retrieve the actual session information

        for a specific user through the `/proxy/sessions/{user}/` API call.


        '
      parameters: []
      responses:
        '200':
          content: {}
          description: OK
      summary: Returns the URL endpoint to which requests passing the access rules
      tags:
      - rbac
    put:
      operationId: UpdateApp
      description: '

        Updates the URL endpoint to which requests passing the access rules

        are forwarded to and/or the format in which the session information

        is encoded.


        '
      parameters: []
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Updates forward end-point
      tags:
      - rbac
    patch:
      operationId: PartialUpdateAppUpdate
      description: 'are forwarded to, and the format in which the session information

        is encoded.


        When running tests, you can retrieve the actual session information

        for a specific user through the `/proxy/sessions/{user}/` API call.


        '
      parameters: []
      responses:
        '200':
          content: {}
          description: OK
      summary: Returns the URL endpoint to which requests passing the access rules
      tags:
      - rbac
  /api/proxy/sessions/{user}/:
    get:
      operationId: RetrieveGetSessionDetail
      description: '

        Returns a session data for a user as it will be passed to the backend

        service.


        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves example session
      tags:
      - rbac
  /api/proxy/engagement/users/:
    get:
      operationId: ListUserEngagements
      description: '

        '
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves engagement metrics
      tags:
      - rbac
  /api/proxy/engagement/:
    get:
      operationId: ListEngagements
      description: '

        '
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves users engagement
      tags:
      - rbac
  /api/proxy/rules{rule}:
    get:
      operationId: RetrieveRuleDetail
      description: '

        '
      parameters:
      - name: rule
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves an access rule
      tags:
      - rbac
    put:
      operationId: UpdateRuleDetail
      description: '

        '
      parameters:
      - name: rule
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Updates an access rule
      tags:
      - rbac
    patch:
      operationId: PartialUpdateRuleDetail
      description: '

        '
      parameters:
      - name: rule
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves an access rule
      tags:
      - rbac
    delete:
      operationId: DestroyRuleDetail
      description: '

        '
      parameters:
      - name: rule
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: NO CONTENT
      summary: Deletes an access rule
      tags:
      - rbac
  /api/proxy/rules:
    get:
      operationId: ListRules
      description: '

        Queries a page (``PAGE_SIZE`` records) of ``Rule``.


        '
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists access rules
      tags:
      - rbac
    post:
      operationId: CreateRuleList
      description: '

        '
      parameters: []
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Creates an access rule
      tags:
      - rbac
    patch:
      operationId: PartialUpdateRuleList
      description: '

        When receiving a request like [{"newpos": 1, "oldpos": 3}],

        it will move the rule at position 3 to position 1, updating all

        rules ranks in-between.


        '
      parameters: []
      responses:
        '200':
          content: {}
          description: OK
      summary: Updates order of rules
      tags:
      - rbac
  /api/themes/editables/relationship/:
    get:
      operationId: ListRelationShips
      description: '

        '
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists edges of an editable node
      tags: []
    post:
      operationId: CreateRelationShipList
      description: '

        '
      parameters: []
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Creates edges of an editable node
      tags: []
    delete:
      operationId: DestroyRelationShipList
      description: ''
      parameters: []
      responses:
        '204':
          description: NO CONTENT
      summary: Deletes edges of an editable node
      tags: []
  /api/themes/editables/{slug}/:
    get:
      operationId: RetrievePageElementDetail
      description: ''
      parameters:
      - name: slug
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves an editable node
      tags: []
    put:
      operationId: UpdatePageElementDetail
      description: ''
      parameters:
      - name: slug
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Updates an editable node
      tags: []
    patch:
      operationId: PartialUpdatePageElementDetail
      description: ''
      parameters:
      - name: slug
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves an editable node
      tags: []
    delete:
      operationId: DestroyPageElementDetail
      description: ''
      parameters:
      - name: slug
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: NO CONTENT
      summary: Deletes an editable node
      tags: []
  /api/themes/editables/:
    get:
      operationId: ListPagesElements
      description: ''
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists editable nodes
      tags: []
    post:
      operationId: CreatePagesElementList
      description: ''
      parameters: []
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Creates an editable node
      tags: []
  /api/themes/assets{path}/:
    get:
      operationId: RetrieveMediaList
      description: ''
      parameters:
      - name: path
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists static asset files
      tags: []
    post:
      operationId: CreateMediaList
      description: ''
      parameters:
      - name: path
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Uploads a static asset file
      tags: []
    put:
      operationId: UpdateMediaList
      description: ''
      parameters:
      - name: path
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Updates meta tags on assets
      tags: []
    delete:
      operationId: DestroyMediaList
      description: ''
      parameters:
      - name: path
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: NO CONTENT
      summary: Deletes static assets file
      tags: []
  /api/themes/sitecss/variables/{name}/:
    get:
      operationId: RetrieveLessVariableDetail
      description: ''
      parameters:
      - name: name
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a css variable
      tags: []
    put:
      operationId: UpdateLessVariableDetail
      description: ''
      parameters:
      - name: name
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Updates a css variable
      tags: []
    patch:
      operationId: PartialUpdateLessVariableDetail
      description: ''
      parameters:
      - name: name
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a css variable
      tags: []
    delete:
      operationId: DestroyLessVariableDetail
      description: ''
      parameters:
      - name: name
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: NO CONTENT
      summary: Deletes a css variable
      tags: []
  /api/themes/sitecss/variables/:
    get:
      operationId: ListLessVariables
      description: ''
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists a website css variables
      tags: []
    put:
      operationId: UpdateLessVariableList
      description: ''
      parameters: []
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Updates a website css variables
      tags: []
  /api/themes/sitecss:
    get:
      operationId: ListSiteCss
      description: ''
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content: {}
          description: OK
      summary: Uploads a website css static assets
      tags: []
    post:
      operationId: CreateSiteCss
      description: ''
      parameters: []
      responses:
        '200':
          content: {}
          description: OK
      summary: Uploads a static asset file
      tags: []
    put:
      operationId: UpdateSiteCss
      description: ''
      parameters: []
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Updates meta tags on assets
      tags: []
    delete:
      operationId: DestroySiteCss
      description: ''
      parameters: []
      responses:
        '204':
          description: NO CONTENT
      summary: Deletes static assets file
      tags: []
  /api/themes/sources/{page}:
    get:
      operationId: RetrieveSourceDetail
      description: ''
      parameters:
      - name: page
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a template source file
      tags: []
    post:
      operationId: CreateSourceDetail
      description: ''
      parameters:
      - name: page
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Creates a template source file
      tags: []
    put:
      operationId: UpdateSourceDetail
      description: ''
      parameters:
      - name: page
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Updates a template source file
      tags: []
    patch:
      operationId: PartialUpdateSourceDetail
      description: ''
      parameters:
      - name: page
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a template source file
      tags: []
  /api/pricing/:
    get:
      operationId: ListPricings
      description: '

        Returns a PAGE_SIZE list of plans.


        '
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists active plans
      tags:
      - subscriptions
  /api/users/{user}/accessibles/{role}/:
    get:
      operationId: RetrieveAccessibleByDescrList
      description: '

        Lists all relations where a ``User`` has a specified ``Role``

        on an ``Organization``.


        see `Flexible Security Framework  <http://djaodjin-saas.readthedocs.io/en/latest/security.html>`_.


        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: role
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists roles of specific type by user
      tags:
      - rbac
    post:
      operationId: CreateAccessibleByDescrList
      description: '

        Creates a request to attach a user to an organization

        with a specified role.


        see `Flexible Security Framework  <http://djaodjin-saas.readthedocs.io/en/latest/security.html>`_.


        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: role
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Requests a role of a specified type
      tags:
      - rbac
  /api/users/{user}/accessibles/:
    get:
      operationId: ListAccessibleBys
      description: '

        Lists all relations where an ``Organization`` is accessible by

        a ``User``. Typically the user was granted specific permissions through

        a ``Role``.


        see `Flexible Security Framework  <http://djaodjin-saas.readthedocs.io/en/latest/security.html>`_.


        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists roles by user
      tags:
      - rbac
    post:
      operationId: CreateAccessibleByList
      description: '

        Creates a request to attach a user to a role on an organization


        see `Flexible Security Framework  <http://djaodjin-saas.readthedocs.io/en/latest/security.html>`_.


        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Requests a role
      tags:
      - rbac
  /api/users/{user}/profiles/:
    get:
      operationId: ListUserProfiles
      description: '

        Queries a page (``PAGE_SIZE`` records) of organization and user profiles.


        The queryset can be filtered for at least one field to match a search

        term (``q``).


        The queryset can be ordered by a field by adding an HTTP query parameter

        ``o=`` followed by the field name. A sequence of fields can be used

        to create a complete ordering by adding a sequence of ``o`` HTTP query

        parameters. To reverse the natural order of a field, prefix the field

        name by a minus (-) sign.


        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: List billing profiles owned by user
      tags:
      - profile
    post:
      operationId: CreateUserProfileList
      description: '

        This end-point creates a new profile whose manager is user and

        returns an error if the profile already exists.


        If you want to request access to an already existing profile,

        see the accessibles end-point.


        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Creates a new profile owned by user
      tags:
      - rbac
  /api/billing/transactions/:
    get:
      operationId: ListTransactions
      description: '

        Queries a page (``PAGE_SIZE`` records) of ``Transaction`` from

        the `ledger  <http://djaodjin-saas.readthedocs.io/en/latest/ledger.html>`_.


        The queryset can be filtered to a range of dates

        ([``start_at``, ``ends_at``]) and for at least one field to match a search

        term (``q``).


        Query results can be ordered by natural fields (``o``) in either ascending

        or descending order (``ot``).


        '
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists ledger transactions
      tags:
      - billing
  /api/billing/charges/:
    get:
      operationId: ListCharges
      description: '

        Queries a page (``PAGE_SIZE`` records) of ``Charge`` that were created

        on the processor.


        The queryset can be filtered to a range of dates

        ([``start_at``, ``ends_at``]) and for at least one field to match a search

        term (``q``).


        Query results can be ordered by natural fields (``o``) in either ascending

        or descending order (``ot``).


        '
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists processor charges
      tags:
      - billing
  /api/metrics/balances/{report}/:
    get:
      operationId: RetrieveBrokerBalances
      description: '

        Queries a balance sheet named ``{report}`` for the broker.


        To add lines in the report see `/api/metrics/balances/{report}/lines/`.


        '
      parameters:
      - name: report
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a balance sheet
      tags:
      - metrics
  /api/metrics/balances/{report}/lines/{rank}/:
    get:
      operationId: RetrieveBalanceLineDetail
      description: '

        Describes a row reported on a balance sheet named `{report}`.


        '
      parameters:
      - name: report
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: rank
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a row in a balance sheet
      tags:
      - metrics
    put:
      operationId: UpdateBalanceLineDetail
      description: '

        Updates a row reported on a balance sheet named `{report}`.


        '
      parameters:
      - name: report
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: rank
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Updates a row in a balance sheet
      tags:
      - metrics
    patch:
      operationId: PartialUpdateBalanceLineDetail
      description: '

        Describes a row reported on a balance sheet named `{report}`.


        '
      parameters:
      - name: report
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: rank
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a row in a balance sheet
      tags:
      - metrics
    delete:
      operationId: DestroyBalanceLineDetail
      description: '

        Deletes a row reported on a balance sheet named `{report}`.


        '
      parameters:
      - name: report
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: rank
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: NO CONTENT
      summary: Deletes a row in a balance sheet
      tags:
      - metrics
  /api/metrics/balances/{report}/lines/:
    get:
      operationId: ListBalanceLines
      description: '

        Queries the list of rows reported on a balance sheet named `{report}`.


        '
      parameters:
      - name: report
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves row headers for a balance sheet
      tags:
      - metrics
    post:
      operationId: CreateBalanceLineList
      description: '

        Adds a new row on the ``{report}`` balance sheet.


        '
      parameters:
      - name: report
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Creates a row in a balance sheet
      tags:
      - metrics
    patch:
      operationId: PartialUpdateBalanceLineList
      description: '

        When receiving a request like [{"newpos": 1, "oldpos": 3}],

        it will move the line at position 3 to position 1, updating the

        rank of all lines in-between.


        '
      parameters:
      - name: report
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Updates the order in which lines are displayed
      tags:
      - metrics
  /api/metrics/registered/:
    get:
      operationId: ListRegistereds
      description: '

        Lists all ``User`` which have no associated role or a role

        to an ``Organization`` which has no Subscription, active or inactive.


        The queryset can be filtered to a range of dates

        ([``start_at``, ``ends_at``]) and for at least one field to match a search

        term (``q``).


        Query results can be ordered by natural fields (``o``) in either ascending

        or descending order (``ot``).


        '
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists top of funnel registered users
      tags:
      - metrics
  /api/profile/:
    get:
      operationId: ListOrganizations
      description: '

        Queries a page (``PAGE_SIZE`` records) of organization and user profiles.


        The queryset can be filtered for at least one field to match a search

        term (``q``).


        The queryset can be ordered by a field by adding an HTTP query parameter

        ``o=`` followed by the field name. A sequence of fields can be used

        to create a complete ordering by adding a sequence of ``o`` HTTP query

        parameters. To reverse the natural order of a field, prefix the field

        name by a minus (-) sign.


        '
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists billing profiles
      tags:
      - profile
    post:
      operationId: CreateOrganizationList
      description: '

        '
      parameters: []
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Creates a billing profile
      tags:
      - profile
  /api/billing/{organization}/bank/:
    get:
      operationId: RetrieveRetrieveBank
      description: '

        Pass through that calls the processor API to retrieve some details about

        the deposit account associated to a provider (if that information is

        available through the `payment processor backend <http://djaodjin-saas.readthedocs.io/en/latest/backends.html>`_
        API).


        This API does not trigger payment of a subscriber to a provider. Checkout

        of a subscription cart is done either through the

        `HTML page <http://djaodjin-saas.readthedocs.io/en/latest/pages_cart.html>`_
        or `API end point <http://djaodjin-saas.readthedocs.io/en/latest/api_checkout.html>`_.


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a payout account
      tags:
      - billing
  /api/billing/{organization}/coupons/{coupon}/:
    get:
      operationId: RetrieveCouponDetail
      description: '

        '
      parameters:
      - name: coupon
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a discount code
      tags:
      - billing
    put:
      operationId: UpdateCouponDetail
      description: '

        '
      parameters:
      - name: coupon
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Updates a discount code
      tags:
      - billing
    patch:
      operationId: PartialUpdateCouponDetail
      description: '

        '
      parameters:
      - name: coupon
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a discount code
      tags:
      - billing
    delete:
      operationId: DestroyCouponDetail
      description: '

        Only coupons which have never been applied to an oder will

        be permanently deleted. Coupons which have already be used

        at least once will be de-activated and still available for

        performance measurements.


        '
      parameters:
      - name: coupon
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: NO CONTENT
      summary: Deletes a discount code
      tags:
      - billing
  /api/billing/{organization}/coupons/:
    get:
      operationId: ListCouponListCreates
      description: '

        Queries a page (``PAGE_SIZE`` records) of ``Coupon`` associated

        to a provider.


        The queryset can be filtered to a range of dates

        ([``start_at``, ``ends_at``]) and for at least one field to match a search

        term (``q``).


        Query results can be ordered by natural fields (``o``) in either ascending

        or descending order (``ot``).


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists discount codes
      tags:
      - billing
    post:
      operationId: CreateCouponList
      description: '

        Customers will be able to use the `code` until `ends_at`

        to subscribe to plans from the Coupon''s provider at a discount.

        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Creates a discount code
      tags: []
  /api/billing/{organization}/receivables/:
    get:
      operationId: ListReceivables
      description: '

        Queries a page (``PAGE_SIZE`` records) of ``Transaction`` marked

        as receivables associated to ``{organization}`` while the organization

        acts as a provider.


        The queryset can be filtered to a range of dates

        ([``start_at``, ``ends_at``]) and for at least one field to match a search

        term (``q``).


        Query results can be ordered by natural fields (``o``) in either ascending

        or descending order (``ot``).


        This API endpoint is typically used to find all sales for ``{organization}``

        whether it was paid or not.


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists provider receivables
      tags:
      - billing
  /api/billing/{organization}/transfers/:
    get:
      operationId: ListTransfers
      description: '

        Queries a page (``PAGE_SIZE`` records) of ``Transaction`` associated

        to ``{organization}`` while the organization acts as a provider.


        The queryset can be filtered to a range of dates

        ([``start_at``, ``ends_at``]) and for at least one field to match a search

        term (``q``).


        Query results can be ordered by natural fields (``o``) in either ascending

        or descending order (``ot``).


        This API endpoint is typically used to find sales, payments, refunds

        and bank deposits for a provider.

        (see `provider pages  <http://djaodjin-saas.readthedocs.io/en/latest/pages_provider_transactions.html>`_)


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists provider payouts
      tags:
      - billing
  /api/profile/{organization}/roles/describe/{role}/:
    get:
      operationId: RetrieveRoleDescriptionDetail
      description: '

        see `Flexible Security Framework  <http://djaodjin-saas.readthedocs.io/en/latest/security.html>`_.


        '
      parameters:
      - name: role
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a role type
      tags:
      - rbac
    put:
      operationId: UpdateRoleDescriptionDetail
      description: '

        see `Flexible Security Framework  <http://djaodjin-saas.readthedocs.io/en/latest/security.html>`_.


        '
      parameters:
      - name: role
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Updates a role type
      tags:
      - rbac
    patch:
      operationId: PartialUpdateRoleDescriptionDetail
      description: '

        see `Flexible Security Framework  <http://djaodjin-saas.readthedocs.io/en/latest/security.html>`_.


        '
      parameters:
      - name: role
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a role type
      tags:
      - rbac
    delete:
      operationId: DestroyRoleDescriptionDetail
      description: '

        see `Flexible Security Framework  <http://djaodjin-saas.readthedocs.io/en/latest/security.html>`_.


        '
      parameters:
      - name: role
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: NO CONTENT
      summary: Deletes a role type
      tags:
      - rbac
  /api/profile/{organization}/roles/describe/:
    get:
      operationId: ListRoleDescriptionListCreates
      description: '

        Lists roles by description``RoleDescription``.


        see `Flexible Security Framework  <http://djaodjin-saas.readthedocs.io/en/latest/security.html>`_.


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists role types
      tags:
      - rbac
    post:
      operationId: CreateRoleDescriptionList
      description: '

        Creates a role that users can take on an organization.


        see `Flexible Security Framework  <http://djaodjin-saas.readthedocs.io/en/latest/security.html>`_.


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Creates a role type
      tags:
      - rbac
  /api/profile/{organization}/subscribers/:
    get:
      operationId: ListSubscribers
      description: '

        Returns a PAGE_SIZE list of subscriber profiles which have or had

        a subscription to a plan provided by {organization}.


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists subscribers for a provider
      tags:
      - subscriptions
  /api/profile/{organization}/plans/{plan}/subscriptions/{subscriber}/:
    get:
      operationId: RetrievePlanSubscriptionDetail
      description: '

        Returns the subscription of {subscriber} to {plan} from provider

        {organization}.


        '
      parameters:
      - name: plan
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: subscriber
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a subscription through the provider
      tags:
      - subscriptions
    put:
      operationId: UpdatePlanSubscriptionDetail
      description: '

        Updates the subscription of {subscriber} to {plan} from provider

        {organization}.


        '
      parameters:
      - name: plan
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: subscriber
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Updates a subscription through the provider
      tags:
      - subscriptions
    patch:
      operationId: PartialUpdatePlanSubscriptionDetail
      description: '

        Returns the subscription of {subscriber} to {plan} from provider

        {organization}.


        '
      parameters:
      - name: plan
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: subscriber
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a subscription through the provider
      tags:
      - subscriptions
    delete:
      operationId: DestroyPlanSubscriptionDetail
      description: '

        Unsubscribes {subscriber} from {plan} provided by {organization}.


        '
      parameters:
      - name: plan
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: subscriber
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: NO CONTENT
      summary: Unsubscribes through the provider
      tags:
      - subscriptions
  /api/profile/{organization}/plans/{plan}/subscriptions/:
    get:
      operationId: ListPlanSubscriptions
      description: '

        Returns a PAGE_SIZE records of subscriptions to {plan} provided by

        {organization}.


        '
      parameters:
      - name: plan
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists subscriptions to a plan
      tags:
      - subscriptions
    post:
      operationId: CreatePlanSubscriptions
      description: '

        Subscribes a customer to the {plan} provided by {organization}.


        '
      parameters:
      - name: plan
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Subscribes to a plan through the provider
      tags:
      - subscriptions
  /api/profile/{organization}/plans/{plan}/:
    get:
      operationId: RetrievePlanDetail
      description: '

        Returns the {plan} for provider {organization}


        The ``is_active`` boolean is used to activate a plan, enabling users

        to subscribe to it, or deactivate a plan, disabling users from subscribing

        to it.


        '
      parameters:
      - name: plan
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a subscription plan
      tags:
      - subscriptions
    put:
      operationId: UpdatePlanDetail
      description: '

        Updates fields for {plan}. If the ``period_amount`` is modified,

        all subscriptions to this plan will be charged the ``period_amount``

        on renewal.


        The ``is_active`` boolean is used to activate a plan, enabling users

        to subscribe to it, or deactivate a plan, disabling users

        from subscribing to it.


        '
      parameters:
      - name: plan
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Updates a subscription plan
      tags:
      - subscriptions
    patch:
      operationId: PartialUpdatePlanDetail
      description: '

        Returns the {plan} for provider {organization}


        The ``is_active`` boolean is used to activate a plan, enabling users

        to subscribe to it, or deactivate a plan, disabling users from subscribing

        to it.


        '
      parameters:
      - name: plan
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a subscription plan
      tags:
      - subscriptions
    delete:
      operationId: DestroyPlanDetail
      description: '

        A plan can only be deleted when there are no subscriptions to it.

        Even if all subscriptions to a plan have expired, the plan cannot

        be deleted. It should be de-activated instead such that no customers

        can subscribes to it.


        '
      parameters:
      - name: plan
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: NO CONTENT
      summary: Deletes a subscription plan
      tags:
      - subscriptions
  /api/profile/{organization}/plans/:
    get:
      operationId: ListPlanListCreates
      description: '

        Returns a PAGE_SIZE list of plans whose provider is {organization}.


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists a provider plans
      tags:
      - subscriptions
    post:
      operationId: CreatePlanList
      description: '

        Creates a subscription plan for provider {organization}.


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Creates a subscription plan
      tags:
      - subscriptions
  /api/metrics/{organization}/coupons/{coupon}/:
    get:
      operationId: RetrieveCouponUses
      description: '

        Queries a page (``PAGE_SIZE`` records) of ``Coupon`` usage.


        The queryset can be filtered to a range of dates

        ([``start_at``, ``ends_at``]) and for at least one field to match a search

        term (``q``).


        The result queryset can be ordered by passing an ``o`` (field name)

        and ``ot`` (asc or desc) parameter.


        '
      parameters:
      - name: coupon
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves performance of a discount code
      tags:
      - metrics
  /api/metrics/{organization}/active/:
    get:
      operationId: ListActiveSubscriptions
      description: '

        Lists all ``Subscription`` to a plan whose provider is

        ``{organization}`` and which are currently in progress.


        Optionnaly when an ``ends_at`` query parameter is specified,

        returns a queryset of ``Subscription`` that were active

        at ``ends_at``. When a ``start_at`` query parameter is specified,

        only considers ``Subscription`` that were created after ``start_at``.


        The queryset can be filtered for at least one field to match a search

        term (``q``).


        Query results can be ordered by natural fields (``o``) in either ascending

        or descending order (``ot``).


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists active subscriptions
      tags:
      - metrics
  /api/metrics/{organization}/balances/:
    get:
      operationId: ListBalances
      description: '

        Generate a table of revenue (rows) per months (columns) for a default

        balance sheet (Income, Backlog, Receivable).


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a default balance sheet
      tags:
      - metrics
  /api/metrics/{organization}/churned/:
    get:
      operationId: ListChurnedSubscriptions
      description: '

        Lists all ``Subscription`` to a plan whose provider is

        ``:organization`` which have ended already.


        The queryset can be further filtered to a range of dates between

        ``start_at`` and ``ends_at``.


        The queryset can be further filtered by passing a ``q`` parameter.

        The result queryset can be ordered.


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists churned subscriptions
      tags:
      - metrics
  /api/metrics/{organization}/customers/:
    get:
      operationId: ListCustomerMetrics
      description: '

        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves 12-month trailing customer counts
      tags:
      - metrics
  /api/metrics/{organization}/plans/:
    get:
      operationId: ListPlanMetrics
      description: '

        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves 12-month trailing plans performance
      tags:
      - metrics
  /api/metrics/{organization}/funds/:
    get:
      operationId: ListRevenueMetrics
      description: '

        Produces sales, payments and refunds over a period of time.


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves 12-month trailing revenue
      tags:
      - metrics
  /api/profile/{organization}/:
    get:
      operationId: RetrieveOrganizationDetail
      description: '

        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a billing profile
      tags:
      - profile
    put:
      operationId: UpdateOrganizationDetail
      description: '

        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Updates a billing profile
      tags:
      - profile
    patch:
      operationId: PartialUpdateOrganizationDetail
      description: '

        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a billing profile
      tags:
      - profile
    delete:
      operationId: DestroyOrganizationDetail
      description: '

        We anonymize the organization instead of purely deleting

        it from the database because we don''t want to loose history

        on subscriptions and transactions.


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: NO CONTENT
      summary: Deletes a billing profile
      tags:
      - profile
  /api/profile/{organization}/roles/{role}/:
    get:
      operationId: RetrieveRoleByDescrList
      description: '

        Lists the specified role assignments for an organization.


        '
      parameters:
      - name: role
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists roles of a specific type
      tags:
      - rbac
    post:
      operationId: CreateRoleByDescrList
      description: '

        Attaches a user to a role on an organization, typically granting

        permissions to the user with regards to managing an organization profile

        (see `Flexible Security Framework  <http://djaodjin-saas.readthedocs.io/en/latest/security.html>`_).


        '
      parameters:
      - name: role
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Creates a role
      tags:
      - rbac
  /api/billing/charges/{organization}/:
    get:
      operationId: RetrieveChargeResource
      description: '

        Pass through to the processor and returns details about a ``Charge``.


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a single processor charge
      tags:
      - billing
  /api/billing/{organization}/balance/:
    get:
      operationId: ListStatementBalances
      description: '

        Get the statement balance due for an organization.


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a customer balance
      tags:
      - billing
    delete:
      operationId: DestroyStatementBalance
      description: '

        Cancel the balance for a provider organization. This will create

        a transaction for this balance cancellation. A manager can use

        this endpoint to cancel balance dues that is known impossible

        to be recovered (e.g. an external bank or credit card company

        act).


        The endpoint returns the transaction created to cancel the

        balance due.


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: NO CONTENT
      summary: Cancels a balance due
      tags:
      - billing
  /api/billing/{organization}/history/:
    get:
      operationId: ListBillings
      description: '

        Queries a page (``PAGE_SIZE`` records) of ``Transaction`` associated

        to ``{organization}`` while the organization acts as a subscriber.


        The queryset can be filtered to a range of dates

        ([``start_at``, ``ends_at``]) and for at least one field to match a search

        term (``q``).


        Query results can be ordered by natural fields (``o``) in either ascending

        or descending order (``ot``).


        This API end point is typically used to display orders, payments and refunds

        of a subscriber (see `subscribers pages  <http://djaodjin-saas.readthedocs.io/en/latest/pages_subscribers.html>`_)


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists subscriber transactions
      tags:
      - billing
  /api/billing/{organization}/card/:
    get:
      operationId: RetrievePaymentMethodDetail
      description: '

        Pass through to the processor to retrieve some details about

        the payment method (ex: credit card) associated to a subscriber.


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a payment method
      tags:
      - billing
    put:
      operationId: UpdatePaymentMethodDetail
      description: '

        Pass through to the processor to update some details about

        the payment method (ex: credit card) associated to a subscriber.


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Updates a payment method
      tags:
      - billing
    patch:
      operationId: PartialUpdatePaymentMethodDetail
      description: '

        Pass through to the processor to retrieve some details about

        the payment method (ex: credit card) associated to a subscriber.


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a payment method
      tags:
      - billing
    delete:
      operationId: DestroyPaymentMethodDetail
      description: '

        Pass through to the processor to remove the payment method (ex: credit

        card) associated to a subscriber.


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: NO CONTENT
      summary: Deletes a payment method
      tags:
      - billing
  /api/billing/{organization}/checkout/:
    get:
      operationId: RetrieveCheckout
      description: '

        Get a list indexed by plans of items that will be charged

        (`lines`) and options that could be charged instead.


        In many subscription businesses, it is possible to buy multiple

        period in advance at a discount. The options reflects that.


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a user cart for checkout
      tags:
      - billing
    post:
      operationId: CreateCheckout
      description: '

        Places an order for the subscription items in the cart and creates

        a ``Charge`` on the ``{organization}`` payment card.


        If the charge fails a balance is due, to be collected later.


        The cart is manipulated through various API endpoints:


        - `/api/cart/redeem/` applies a coupon code for a potential discount.

        - `/api/cart/` adds or updates a cart item.

        - `/api/cart/{plan}` removes a cart item.


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Checkouts a user cart
      tags:
      - billing
  /api/profile/{organization}/roles/:
    get:
      operationId: ListRoles
      description: '

        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists roles for an organization
      tags:
      - rbac
  /api/profile/{organization}/subscriptions/{subscribed_plan}/:
    get:
      operationId: RetrieveSubscriptionDetail
      description: '

        Returns the subscription of {organization} to {subscribed_plan}.


        '
      parameters:
      - name: subscribed_plan
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a subscription
      tags:
      - subscriptions
    put:
      operationId: UpdateSubscriptionDetail
      description: '

        Unsubscribes {organization} from {subscribed_plan} at a future date.


        '
      parameters:
      - name: subscribed_plan
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Unsubscribes  at a future date
      tags:
      - subscriptions
    patch:
      operationId: PartialUpdateSubscriptionDetail
      description: '

        Returns the subscription of {organization} to {subscribed_plan}.


        '
      parameters:
      - name: subscribed_plan
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a subscription
      tags:
      - subscriptions
    delete:
      operationId: DestroySubscriptionDetail
      description: '

        Unsubscribes {organization} from {subscribed_plan}.


        '
      parameters:
      - name: subscribed_plan
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: NO CONTENT
      summary: Unsubscribes
      tags:
      - subscriptions
  /api/profile/{organization}/subscriptions/:
    get:
      operationId: ListSubscriberSubscriptions
      description: '

        Returns a PAGE_SIZE list of subscriptions past and present for

        subscriber {organization}.


        The queryset can be further refined to match a search filter (``q``)

        and sorted on specific fields (``o``).


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists subscriptions
      tags:
      - subscriptions
  /api/accounts/:
    get:
      operationId: ListAccountsSearchs
      description: '

        Queries a page (``PAGE_SIZE`` records) of organization and user profiles.


        The queryset can be filtered for at least one field to match a search

        term (``q``).


        The queryset can be ordered by a field by adding an HTTP query parameter

        ``o=`` followed by the field name. A sequence of fields can be used

        to create a complete ordering by adding a sequence of ``o`` HTTP query

        parameters. To reverse the natural order of a field, prefix the field

        name by a minus (-) sign.


        '
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Searches billing and login profiles
      tags:
      - profile
  /api/accounts/users/:
    get:
      operationId: ListUsersTypeaheads
      description: '

        Queries a page (``PAGE_SIZE`` records) of ``User``.


        The queryset can be filtered to a range of dates

        ([``start_at``, ``ends_at``]) and for at least one field to match a search

        term (``q``).


        Query results can be ordered by natural fields (``o``) in either ascending

        or descending order (``ot``).


        '
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Searches login profiles
      tags:
      - profile
  /api/accounts/profiles/:
    get:
      operationId: ListProfilesTypeaheads
      description: '

        Queries a page (``PAGE_SIZE`` records) of candidate profiles based

        of a search criteria (``q``).


        This API differs from /api/profile in that it is designed to be used

        in auto-completion input fields instead of designed to list all profiles.


        The queryset can be ordered by a field by adding an HTTP query parameter

        ``o=`` followed by the field name. A sequence of fields can be used

        to create a complete ordering by adding a sequence of ``o`` HTTP query

        parameters. To reverse the natural order of a field, prefix the field

        name by a minus (-) sign.


        '
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Searches billing profiles
      tags:
      - profile
  /api/contacts/{user}/activities/:
    get:
      operationId: ListActivityListCreates
      description: '

        Returns ``PAGE_SIZE`` activity records for a user.


        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists activities for a contact
      tags:
      - profile
    post:
      operationId: CreateActivityList
      description: '

        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Records new activity with a contact
      tags:
      - profile
  /api/contacts/{user}/:
    get:
      operationId: RetrieveContactDetail
      description: to be deprecated in the future.
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: This API end-point is a shadow of `UserDetailAPIView` and is marked
      tags: []
    put:
      operationId: UpdateContactDetail
      description: '

        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Updates a login profile
      tags:
      - profile
    patch:
      operationId: PartialUpdateContactDetail
      description: '

        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Updates a login profile
      tags:
      - profile
    delete:
      operationId: DestroyContactDetail
      description: '

        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: NO CONTENT
      summary: Deletes a login profile
      tags:
      - profile
  /api/contacts/:
    get:
      operationId: ListContacts
      description: to be deprecated in the future.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: This API end-point is a shadow of `UserListCreateAPIView` and is marked
      tags: []
    post:
      operationId: CreateContactList
      description: '

        '
      parameters: []
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Creates a user profile
      tags:
      - profile
  /api/users/{user}/:
    get:
      operationId: RetrieveUserDetail
      description: '

        Retrieves details on one single user profile with slug ``{user}``.


        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves a login profile
      tags:
      - profile
    put:
      operationId: UpdateUserDetail
      description: '

        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Updates a login profile
      tags:
      - profile
    patch:
      operationId: PartialUpdateUserDetail
      description: '

        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Updates a login profile
      tags:
      - profile
    delete:
      operationId: DestroyUserDetail
      description: '

        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: NO CONTENT
      summary: Deletes a login profile
      tags:
      - profile
  /api/users/:
    get:
      operationId: ListUserListCreates
      description: '

        Queries a page (``PAGE_SIZE`` records) of organization and user profiles.


        The queryset can be filtered for at least one field to match a search

        term (``q``).


        The queryset can be ordered by a field by adding an HTTP query parameter

        ``o=`` followed by the field name. A sequence of fields can be used

        to create a complete ordering by adding a sequence of ``o`` HTTP query

        parameters. To reverse the natural order of a field, prefix the field

        name by a minus (-) sign.


        '
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: o
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Lists user profiles
      tags:
      - profile
    post:
      operationId: CreateUserList
      description: '

        '
      parameters: []
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Creates a user profile
      tags:
      - profile
  /api/auth/activate/{verification_key}/:
    get:
      operationId: RetrieveJWTActivate
      description: '

        Retrieves information about a user based on an activation key.


        '
      parameters:
      - name: verification_key
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves user associated to an activation key
      tags:
      - auth
    post:
      operationId: CreateJWTActivate
      description: '

        Activates a new user and returns a JSON Web Token that can subsequently

        be used to authenticate the new user in HTTP requests.


        '
      parameters:
      - name: verification_key
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Activates a user
      tags:
      - auth
  /api/todos/:
    get:
      operationId: ListTodos
      description: '

        '
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves news and items to take care of.
      tags:
      - metrics
  /api:
    get:
      operationId: RetrieveDjaoAppAPIVersion
      description: ''
      parameters: []
      responses:
        '200':
          content: {}
          description: OK
      summary: Retrieves version of the API
      tags: []
  /api/stripe/postevent:
    post:
      operationId: CreateStripeWebhook
      description: ''
      parameters: []
      responses:
        '200':
          content: {}
          description: OK
      summary: Answers callback from Stripe.
      tags: []
  /api/notifications/{template}/:
    post:
      operationId: CreateNotificationDetail
      description: '

        '
      parameters:
      - name: template
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Sends a test notification e-mail
      tags:
      - themes
  /api/proxy/key/:
    post:
      operationId: CreateGenerateKey
      description: '

        Rotates the key used to encode the session information forwarded

        to the application entry point.


        '
      parameters: []
      responses:
        '200':
          content: {}
          description: OK
      summary: Rotates session encoding key
      tags:
      - rbac
  /api/themes/:
    post:
      operationId: CreateThemePackageList
      description: '

        Uploads a theme package with templates that will override the default

        ones. See `references and tutorials on creating themes

        <https://djaodjin.com/docs/themes/>`_ for details on the theme package

        structure and customizing the default templates.


        '
      parameters: []
      responses:
        '200':
          content: {}
          description: OK
      summary: Uploads a theme package
      tags:
      - themes
    delete:
      operationId: DestroyThemePackageList
      description: '

        Removes the custom theme templates and assets.


        Pages will be using the default theme after a reset.


        '
      parameters: []
      responses:
        '204':
          description: NO CONTENT
      summary: Removes custom theme
      tags:
      - themes
  /api/themes/editables/alias{path}/:
    post:
      operationId: CreatePageElementAlias
      description: ''
      parameters:
      - name: path
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Aliases the content of an editable node
      tags: []
  /api/themes/editables/attach{path}:
    post:
      operationId: CreatePageElementMove
      description: '

        Moves a PageElement from one attachement to another.

        '
      parameters:
      - name: path
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Moves an editable node
      tags: []
  /api/themes/editables/mirror{path}/:
    post:
      operationId: CreatePageElementMirror
      description: '

        Mirrors the content of a PageElement and attach the mirror

        under another node.

        '
      parameters:
      - name: path
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Mirrors the content of an editable node
      tags: []
  /api/cart/redeem/:
    post:
      operationId: CreateCouponRedeem
      description: '

        Redeems a ``Coupon`` and applies the discount to the eligible items

        in the cart.


        '
      parameters: []
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Redeems a discount code
      tags:
      - billing
  /api/cart/{plan}/upload/:
    post:
      operationId: CreateCartItemUpload
      description: '

        Add a ``Plan`` into the subscription cart of multiple users as per the

        content of an uploaded file.


        This works bulk fashion of `/cart/ endpoint <http://djaodjin-saas.readthedocs.io/en/latest/api_cart.html>`_.
        The

        uploaded file must be a CSV containing the fields ``first_name``,

        ``last_name`` and email. The CSV file must not contain a header

        line, only data.


        '
      parameters:
      - name: plan
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Uploads multiple discount codes into a cart
      tags:
      - billing
  /api/cart/:
    post:
      operationId: CreateCartItem
      description: '

        Adds a ``Plan`` into the cart of the ``request.user``.


        The cart can later be checked out and paid by an ``Organization``,

        either through the `HTML page <http://djaodjin-saas.readthedocs.io/en/latest/pages_cart.html>`_

        or `API end point <http://djaodjin-saas.readthedocs.io/en/latest/api_checkout.html>`_.


        This end point is typically used when a user is presented with a list

        of add-ons that she can subscribes to in one checkout screen. The end-point

        works in both cases, authenticated or anonymous users. For authenticated

        users, the cart is stored in the database as ``CartItem`` objects.

        For anonymous users, the cart is stored in an HTTP Cookie.


        The end-point accepts a single item or a list of items.


        ``quantity`` is optional. When it is not specified, subsquent checkout

        screens will provide choices to pay multiple periods in advance

        When additional ``full_name``, ``email`` and ``sync_on`` are specified,

        payment can be made by one ``Organization`` for another ``Organization``

        to be subscribed (see `GroupBuy orders <http://djaodjin-saas.readthedocs.io/en/latest/group_buy.html>`_).


        ``option`` is optional. When it is not specified, subsquent checkout

        screens will provide choices to pay multiple periods in advance

        When additional ``full_name`` and ``sync_on`` are specified,

        payment can be made by one ``Organization`` for another ``Organization``

        to be subscribed (see `GroupBuy orders <http://djaodjin-saas.readthedocs.io/en/latest/group_buy.html>`_).


        '
      parameters: []
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Adds an item into a cart
      tags:
      - billing
    delete:
      operationId: DestroyCartItem
      description: '

        Removes an item from the ``request.user`` cart.


        '
      parameters: []
      responses:
        '204':
          description: NO CONTENT
      summary: Removes an item from a cart
      tags:
      - billing
  /api/legal/{agreement}/sign/:
    post:
      operationId: CreateAgreementSign
      description: '

        Indicates the request user has signed the required consent agreement.


        '
      parameters:
      - name: agreement
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Signs a consent agreement
      tags:
      - profile
  /api/users/{user}/accessibles/{role}/{organization}/:
    post:
      operationId: CreateAccessibleDetail
      description: '

        Re-sends the request e-mail that the user is requesting a role

        on the organization.


        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: role
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Re-sends request for role
      tags:
      - rbac
    delete:
      operationId: DestroyAccessibleDetail
      description: '

        Dettach a user from one or all roles with regards to an organization,

        typically resulting in revoking permissions from this user to manage

        part of an organization profile.


        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: role
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: NO CONTENT
      summary: Deletes a role by type
      tags:
      - rbac
  /api/billing/charges/{organization}/refund/:
    post:
      operationId: CreateChargeRefund
      description: '

        Partially or totally refund all or a subset of line items on a ``Charge``.


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Refunds a processor charge
      tags:
      - billing
  /api/billing/{organization}/transfers/import/:
    post:
      operationId: CreateImportTransactions
      description: '

        The primary purpose of this API call is for a provider to keep

        accurate metrics for the performance of the product sold, regardless

        of payment options (online or offline).


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Inserts an offline transactions.
      tags:
      - billing
  /api/profile/{organization}/subscribers/accept/{request_key}/:
    post:
      operationId: CreateSubscriptionRequestAccept
      description: '

        Accepts a subscription request.


        '
      parameters:
      - name: request_key
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Grants a subscription request
      tags:
      - rbac
  /api/billing/charges/{organization}/email/:
    post:
      operationId: CreateEmailChargeReceipt
      description: '

        Email the charge receipt to the customer email address on file.


        The service sends a duplicate e-mail receipt for charge `ch_XAb124EF`

        to the e-mail address of the customer, i.e. `joe@localhost.localdomain`.


        '
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Re-sends a charge receipt
      tags:
      - billing
  /api/profile/{organization}/roles/{role}/{user}/:
    post:
      operationId: CreateRoleDetail
      description: '

        Re-sends the invite e-mail that the user was granted a role

        on the organization.


        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: role
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Re-sends role invite
      tags:
      - rbac
    delete:
      operationId: DestroyRoleDetail
      description: '

        Dettach a user from one or all roles with regards to an organization,

        typically resulting in revoking permissions from this user to manage

        part of an organization profile.


        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: role
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: NO CONTENT
      summary: Deletes a role
      tags:
      - rbac
  /api/profile/{organization}/picture/:
    post:
      operationId: CreateOrganizationPicture
      description: ''
      parameters:
      - name: organization
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Uploads a static asset file
      tags: []
  /api/contacts/{user}/picture/:
    post:
      operationId: CreateContactPicture
      description: ''
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Uploads a picture for the user profile
      tags: []
  /api/users/{user}/api-keys/:
    post:
      operationId: CreateResetAPIKeys
      description: '

        Resets the secret API key with which a user can authenticate

        with the service.


        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Resets a user secret API key
      tags:
      - auth
  /api/users/{user}/activate/:
    post:
      operationId: CreateUserActivate
      description: '

        Re-sends an activation e-mail if the user is not already activated.


        The template for the e-mail sent to the user can be found in

        notification/verification.eml.


        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Re-sends an activation link
      tags:
      - auth
  /api/users/{user}/picture/:
    post:
      operationId: CreateUserPicture
      description: ''
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Uploads a picture for the user profile
      tags: []
  /api/auth/tokens/verify/:
    post:
      operationId: CreateJWTVerify
      description: '

        The authenticated user and the user associated to the token should be

        identical.


        '
      parameters: []
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Verifies a JSON Web Token
      tags:
      - auth
  /api/auth/tokens/:
    post:
      operationId: CreateJWTRefresh
      description: '

        Refreshes a JSON Web Token by verifying the token and creating

        a new one that expires further in the future.


        The authenticated user and the user associated to the token should be

        identical.


        '
      parameters: []
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Refreshes a JSON Web Token
      tags:
      - auth
  /api/auth/logout/:
    post:
      operationId: CreateJWTLogout
      description: '

        Removes all cookies associated with the session.


        This API endpoint is only useful when the user is using Cookie-based

        authentication. Tokens expire; they cannot be revoked.


        '
      parameters: []
      responses:
        '200':
          content: {}
          description: OK
      summary: Logs a user out
      tags:
      - auth
  /api/auth/register/:
    post:
      operationId: CreateJWTRegister
      description: '

        Creates a new user and returns a JSON Web Token that can subsequently

        be used to authenticate the new user in HTTP requests.


        '
      parameters: []
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Registers a user
      tags:
      - auth
  /api/auth/recover/:
    post:
      operationId: CreatePasswordReset
      description: '

        The user is uniquely identified by her email address.


        '
      parameters: []
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Emails a password reset link
      tags:
      - auth
  /api/auth/reset/{uidb64}/{token}/:
    post:
      operationId: CreateJWTPasswordResetConfirm
      description: '

        Sets a new password after a recover password was triggered

        and returns a JSON Web Token that can subsequently

        be used to authenticate the new user in HTTP requests.


        '
      parameters:
      - name: token
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: uidb64
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Confirms a password reset
      tags:
      - auth
  /api/auth/:
    post:
      operationId: CreateJWTLogin
      description: '

        Returns a JSON Web Token that can be used in requests that require

        authentication.


        '
      parameters: []
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Logs a user in
      tags:
      - auth
  /api/contact/:
    post:
      operationId: CreateContactUs
      description: '

        Emails a free form contact-us message from a customer to the provider


        '
      parameters: []
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Sends a contact-us message
      tags:
      - auth
  /api/themes/editables/{slug}/add-tags/:
    put:
      operationId: UpdatePageElementAddTags
      description: '

        Add tags to a ``PageElement`` if they are not already present.

        '
      parameters:
      - name: slug
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Adds tags to an editable node
      tags: []
    patch:
      operationId: PartialUpdatePageElementAddTags
      description: '

        Add tags to a ``PageElement`` if they are not already present.

        '
      parameters:
      - name: slug
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Adds tags to an editable node
      tags: []
  /api/themes/editables/{slug}/remove-tags/:
    put:
      operationId: UpdatePageElementRemoveTags
      description: '

        Remove tags from a ``PageElement``.


        '
      parameters:
      - name: slug
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Remove tags from an editable node
      tags:
      - content
    patch:
      operationId: PartialUpdatePageElementRemoveTags
      description: '

        Remove tags from a ``PageElement``.


        '
      parameters:
      - name: slug
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Remove tags from an editable node
      tags:
      - content
  /api/users/{user}/accessibles/accept/{verification_key}/:
    put:
      operationId: UpdateRoleAccept
      description: '

        Accepts a role on an organization.


        '
      parameters:
      - name: verification_key
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Accepts role invite
      tags:
      - rbac
  /api/users/{user}/ssh-keys/:
    put:
      operationId: UpdatePublicKey
      description: '

        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Updates a user public RSA key
      tags:
      - auth
  /api/users/{user}/notifications/:
    put:
      operationId: UpdateUserNotifications
      description: '

        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Changes a user notifications preferences
      tags:
      - profile
    patch:
      operationId: PartialUpdateUserNotifications
      description: '

        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: OK
      summary: Changes a user notifications preferences
      tags:
      - profile
  /api/users/{user}/password/:
    put:
      operationId: UpdatePasswordChange
      description: '

        '
      parameters:
      - name: user
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content: {}
      responses:
        '200':
          content: {}
          description: OK
      summary: Changes a user password
      tags:
      - auth
